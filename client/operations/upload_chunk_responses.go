// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kaz-as/zip/models"
)

// UploadChunkReader is a Reader for the UploadChunk structure.
type UploadChunkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadChunkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUploadChunkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUploadChunkDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUploadChunkOK creates a UploadChunkOK with default headers values
func NewUploadChunkOK() *UploadChunkOK {
	return &UploadChunkOK{}
}

/*
UploadChunkOK describes a response with status code 200, with default header values.

OK uploaded (including already uploaded)
*/
type UploadChunkOK struct {
}

// IsSuccess returns true when this upload chunk o k response has a 2xx status code
func (o *UploadChunkOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this upload chunk o k response has a 3xx status code
func (o *UploadChunkOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this upload chunk o k response has a 4xx status code
func (o *UploadChunkOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this upload chunk o k response has a 5xx status code
func (o *UploadChunkOK) IsServerError() bool {
	return false
}

// IsCode returns true when this upload chunk o k response a status code equal to that given
func (o *UploadChunkOK) IsCode(code int) bool {
	return code == 200
}

func (o *UploadChunkOK) Error() string {
	return fmt.Sprintf("[POST /files/upload][%d] uploadChunkOK ", 200)
}

func (o *UploadChunkOK) String() string {
	return fmt.Sprintf("[POST /files/upload][%d] uploadChunkOK ", 200)
}

func (o *UploadChunkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUploadChunkDefault creates a UploadChunkDefault with default headers values
func NewUploadChunkDefault(code int) *UploadChunkDefault {
	return &UploadChunkDefault{
		_statusCode: code,
	}
}

/*
UploadChunkDefault describes a response with status code -1, with default header values.

generic error response
*/
type UploadChunkDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the upload chunk default response
func (o *UploadChunkDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this upload chunk default response has a 2xx status code
func (o *UploadChunkDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this upload chunk default response has a 3xx status code
func (o *UploadChunkDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this upload chunk default response has a 4xx status code
func (o *UploadChunkDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this upload chunk default response has a 5xx status code
func (o *UploadChunkDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this upload chunk default response a status code equal to that given
func (o *UploadChunkDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *UploadChunkDefault) Error() string {
	return fmt.Sprintf("[POST /files/upload][%d] uploadChunk default  %+v", o._statusCode, o.Payload)
}

func (o *UploadChunkDefault) String() string {
	return fmt.Sprintf("[POST /files/upload][%d] uploadChunk default  %+v", o._statusCode, o.Payload)
}

func (o *UploadChunkDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *UploadChunkDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
