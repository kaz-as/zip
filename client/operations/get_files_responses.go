// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kaz-as/zip/models"
)

// GetFilesReader is a Reader for the GetFiles structure.
type GetFilesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFilesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFilesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetFilesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetFilesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetFilesOK creates a GetFilesOK with default headers values
func NewGetFilesOK() *GetFilesOK {
	return &GetFilesOK{}
}

/*
GetFilesOK describes a response with status code 200, with default header values.

list of files
*/
type GetFilesOK struct {
	Payload []*models.FileHeader
}

// IsSuccess returns true when this get files o k response has a 2xx status code
func (o *GetFilesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get files o k response has a 3xx status code
func (o *GetFilesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get files o k response has a 4xx status code
func (o *GetFilesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get files o k response has a 5xx status code
func (o *GetFilesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get files o k response a status code equal to that given
func (o *GetFilesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetFilesOK) Error() string {
	return fmt.Sprintf("[GET /files][%d] getFilesOK  %+v", 200, o.Payload)
}

func (o *GetFilesOK) String() string {
	return fmt.Sprintf("[GET /files][%d] getFilesOK  %+v", 200, o.Payload)
}

func (o *GetFilesOK) GetPayload() []*models.FileHeader {
	return o.Payload
}

func (o *GetFilesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFilesNotFound creates a GetFilesNotFound with default headers values
func NewGetFilesNotFound() *GetFilesNotFound {
	return &GetFilesNotFound{}
}

/*
GetFilesNotFound describes a response with status code 404, with default header values.

archive not found
*/
type GetFilesNotFound struct {
}

// IsSuccess returns true when this get files not found response has a 2xx status code
func (o *GetFilesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get files not found response has a 3xx status code
func (o *GetFilesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get files not found response has a 4xx status code
func (o *GetFilesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get files not found response has a 5xx status code
func (o *GetFilesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get files not found response a status code equal to that given
func (o *GetFilesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetFilesNotFound) Error() string {
	return fmt.Sprintf("[GET /files][%d] getFilesNotFound ", 404)
}

func (o *GetFilesNotFound) String() string {
	return fmt.Sprintf("[GET /files][%d] getFilesNotFound ", 404)
}

func (o *GetFilesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetFilesDefault creates a GetFilesDefault with default headers values
func NewGetFilesDefault(code int) *GetFilesDefault {
	return &GetFilesDefault{
		_statusCode: code,
	}
}

/*
GetFilesDefault describes a response with status code -1, with default header values.

generic error response
*/
type GetFilesDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get files default response
func (o *GetFilesDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this get files default response has a 2xx status code
func (o *GetFilesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get files default response has a 3xx status code
func (o *GetFilesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get files default response has a 4xx status code
func (o *GetFilesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get files default response has a 5xx status code
func (o *GetFilesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get files default response a status code equal to that given
func (o *GetFilesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *GetFilesDefault) Error() string {
	return fmt.Sprintf("[GET /files][%d] getFiles default  %+v", o._statusCode, o.Payload)
}

func (o *GetFilesDefault) String() string {
	return fmt.Sprintf("[GET /files][%d] getFiles default  %+v", o._statusCode, o.Payload)
}

func (o *GetFilesDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetFilesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
