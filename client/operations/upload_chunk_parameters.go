// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kaz-as/zip/models"
)

// NewUploadChunkParams creates a new UploadChunkParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadChunkParams() *UploadChunkParams {
	return &UploadChunkParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadChunkParamsWithTimeout creates a new UploadChunkParams object
// with the ability to set a timeout on a request.
func NewUploadChunkParamsWithTimeout(timeout time.Duration) *UploadChunkParams {
	return &UploadChunkParams{
		timeout: timeout,
	}
}

// NewUploadChunkParamsWithContext creates a new UploadChunkParams object
// with the ability to set a context for a request.
func NewUploadChunkParamsWithContext(ctx context.Context) *UploadChunkParams {
	return &UploadChunkParams{
		Context: ctx,
	}
}

// NewUploadChunkParamsWithHTTPClient creates a new UploadChunkParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadChunkParamsWithHTTPClient(client *http.Client) *UploadChunkParams {
	return &UploadChunkParams{
		HTTPClient: client,
	}
}

/*
UploadChunkParams contains all the parameters to send to the API endpoint

	for the upload chunk operation.

	Typically these are written to a http.Request.
*/
type UploadChunkParams struct {

	/* Chunk.

	   chunk's number or count

	   Format: int32
	*/
	QueryChunk int32

	// Chunk.
	//
	// Format: binary
	BodyChunk models.ChunkUploadingParam

	/* ID.

	   archive uid

	   Format: int64
	*/
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload chunk params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadChunkParams) WithDefaults() *UploadChunkParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload chunk params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadChunkParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upload chunk params
func (o *UploadChunkParams) WithTimeout(timeout time.Duration) *UploadChunkParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload chunk params
func (o *UploadChunkParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload chunk params
func (o *UploadChunkParams) WithContext(ctx context.Context) *UploadChunkParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload chunk params
func (o *UploadChunkParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload chunk params
func (o *UploadChunkParams) WithHTTPClient(client *http.Client) *UploadChunkParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload chunk params
func (o *UploadChunkParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQueryChunk adds the chunk to the upload chunk params
func (o *UploadChunkParams) WithQueryChunk(chunk int32) *UploadChunkParams {
	o.SetQueryChunk(chunk)
	return o
}

// SetQueryChunk adds the chunk to the upload chunk params
func (o *UploadChunkParams) SetQueryChunk(chunk int32) {
	o.QueryChunk = chunk
}

// WithBodyChunk adds the chunk to the upload chunk params
func (o *UploadChunkParams) WithBodyChunk(chunk models.ChunkUploadingParam) *UploadChunkParams {
	o.SetBodyChunk(chunk)
	return o
}

// SetBodyChunk adds the chunk to the upload chunk params
func (o *UploadChunkParams) SetBodyChunk(chunk models.ChunkUploadingParam) {
	o.BodyChunk = chunk
}

// WithID adds the id to the upload chunk params
func (o *UploadChunkParams) WithID(id int64) *UploadChunkParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the upload chunk params
func (o *UploadChunkParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *UploadChunkParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param chunk
	qrChunk := o.QueryChunk
	qChunk := swag.FormatInt32(qrChunk)
	if qChunk != "" {

		if err := r.SetQueryParam("chunk", qChunk); err != nil {
			return err
		}
	}
	if o.BodyChunk != nil {
		if err := r.SetBodyParam(o.BodyChunk); err != nil {
			return err
		}
	}

	// query param id
	qrID := o.ID
	qID := swag.FormatInt64(qrID)
	if qID != "" {

		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
