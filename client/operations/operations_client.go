// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CheckChunks(params *CheckChunksParams, opts ...ClientOption) (*CheckChunksOK, error)

	CreateArchive(params *CreateArchiveParams, writer io.Writer, opts ...ClientOption) (*CreateArchiveOK, error)

	GetFiles(params *GetFilesParams, opts ...ClientOption) (*GetFilesOK, error)

	InitUploadArchive(params *InitUploadArchiveParams, opts ...ClientOption) (*InitUploadArchiveOK, error)

	IsCompleted(params *IsCompletedParams, opts ...ClientOption) (*IsCompletedOK, error)

	UploadChunk(params *UploadChunkParams, opts ...ClientOption) (*UploadChunkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CheckChunks checks which chunks are not uploaded yet
*/
func (a *Client) CheckChunks(params *CheckChunksParams, opts ...ClientOption) (*CheckChunksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckChunksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkChunks",
		Method:             "GET",
		PathPattern:        "/files/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckChunksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckChunksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CheckChunksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateArchive creates zip archive from custom files
*/
func (a *Client) CreateArchive(params *CreateArchiveParams, writer io.Writer, opts ...ClientOption) (*CreateArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateArchiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createArchive",
		Method:             "POST",
		PathPattern:        "/files/zip",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateArchiveReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateArchiveDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetFiles lists of files in a zip archive
*/
func (a *Client) GetFiles(params *GetFilesParams, opts ...ClientOption) (*GetFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFiles",
		Method:             "GET",
		PathPattern:        "/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
InitUploadArchive inits uploading new zip archive
*/
func (a *Client) InitUploadArchive(params *InitUploadArchiveParams, opts ...ClientOption) (*InitUploadArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInitUploadArchiveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "initUploadArchive",
		Method:             "POST",
		PathPattern:        "/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InitUploadArchiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InitUploadArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*InitUploadArchiveDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
IsCompleted checks if archive is completed unarchived
*/
func (a *Client) IsCompleted(params *IsCompletedParams, opts ...ClientOption) (*IsCompletedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsCompletedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "isCompleted",
		Method:             "HEAD",
		PathPattern:        "/files/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IsCompletedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsCompletedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IsCompletedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UploadChunk uploads a chunk of the previously initialized file
*/
func (a *Client) UploadChunk(params *UploadChunkParams, opts ...ClientOption) (*UploadChunkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadChunkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uploadChunk",
		Method:             "POST",
		PathPattern:        "/files/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/octet-stream"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadChunkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadChunkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UploadChunkDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
