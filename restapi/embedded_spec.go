// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/octet-stream"
  ],
  "produces": [
    "application/json",
    "application/octet-stream"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for zip processing",
    "title": "Zip processing",
    "version": "1.0.0"
  },
  "paths": {
    "/files": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "list of files in a zip archive",
        "operationId": "getFiles",
        "parameters": [
          {
            "$ref": "#/parameters/ArchiveID"
          }
        ],
        "responses": {
          "200": {
            "description": "list of files",
            "schema": {
              "description": "list of files",
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileHeader"
              }
            }
          },
          "404": {
            "description": "archive not found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "init uploading new zip archive",
        "operationId": "initUploadArchive",
        "parameters": [
          {
            "name": "archive",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "new upload initialized",
            "schema": {
              "$ref": "#/definitions/InitUploadSuccess"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/files/upload": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "check which chunks are not uploaded yet",
        "operationId": "checkChunks",
        "parameters": [
          {
            "$ref": "#/parameters/ArchiveID"
          }
        ],
        "responses": {
          "200": {
            "description": "list of chunks number",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChunkNumber"
              }
            }
          },
          "404": {
            "description": "archive not found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "upload a chunk of the previously initialized file",
        "operationId": "uploadChunk",
        "parameters": [
          {
            "$ref": "#/parameters/ArchiveID"
          },
          {
            "name": "chunk",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChunkUploadingParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK uploaded (including already uploaded)"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/files/zip": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "summary": "create zip archive from custom files",
        "operationId": "createArchive",
        "parameters": [
          {
            "name": "files",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FilesForArchive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "zip file is producing",
            "schema": {
              "$ref": "#/definitions/ZipProducingSuccess"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Archive": {
      "type": "object",
      "required": [
        "name",
        "size"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/ArchiveName"
        },
        "size": {
          "$ref": "#/definitions/Size"
        }
      }
    },
    "ArchiveID": {
      "description": "archive uid",
      "type": "integer",
      "format": "int64"
    },
    "ArchiveName": {
      "description": "archive name",
      "type": "string"
    },
    "ChunkNumber": {
      "description": "chunk's number or count",
      "type": "integer",
      "format": "int32"
    },
    "ChunkUploadingParam": {
      "type": "string",
      "format": "binary"
    },
    "FileHeader": {
      "description": "file header",
      "type": "object",
      "required": [
        "name",
        "size",
        "path"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/FileName"
        },
        "path": {
          "$ref": "#/definitions/FilePath"
        },
        "size": {
          "$ref": "#/definitions/Size"
        }
      }
    },
    "FileName": {
      "description": "file name",
      "type": "string"
    },
    "FilePath": {
      "description": "file path (without its name) in its source archive",
      "type": "array",
      "items": {
        "description": "folder name",
        "type": "string",
        "pattern": "^[a-zA-Z0-9._-][a-zA-Z0-9._ -]*$"
      }
    },
    "FilesForArchive": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "$ref": "#/definitions/FileName"
              },
              "new-name": {
                "$ref": "#/definitions/FileName"
              },
              "new-path": {
                "$ref": "#/definitions/FilePath"
              },
              "path": {
                "$ref": "#/definitions/FilePath"
              }
            }
          }
        },
        "id": {
          "$ref": "#/definitions/ArchiveID"
        }
      }
    },
    "InitUploadSuccess": {
      "description": "archive summary",
      "type": "object",
      "properties": {
        "chunks": {
          "$ref": "#/definitions/ChunkNumber"
        },
        "each": {
          "$ref": "#/definitions/Size"
        },
        "id": {
          "$ref": "#/definitions/ArchiveID"
        }
      }
    },
    "Size": {
      "description": "size in bytes",
      "type": "integer",
      "format": "int64"
    },
    "ZipProducingSuccess": {
      "type": "string",
      "format": "binary"
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "ArchiveID": {
      "type": "integer",
      "format": "int64",
      "description": "archive uid",
      "name": "id",
      "in": "query",
      "required": true
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json",
    "application/octet-stream"
  ],
  "produces": [
    "application/json",
    "application/octet-stream"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for zip processing",
    "title": "Zip processing",
    "version": "1.0.0"
  },
  "paths": {
    "/files": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "list of files in a zip archive",
        "operationId": "getFiles",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "archive uid",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of files",
            "schema": {
              "description": "list of files",
              "type": "array",
              "items": {
                "$ref": "#/definitions/FileHeader"
              }
            }
          },
          "404": {
            "description": "archive not found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "init uploading new zip archive",
        "operationId": "initUploadArchive",
        "parameters": [
          {
            "name": "archive",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Archive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "new upload initialized",
            "schema": {
              "$ref": "#/definitions/InitUploadSuccess"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/files/upload": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "check which chunks are not uploaded yet",
        "operationId": "checkChunks",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "archive uid",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of chunks number",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChunkNumber"
              }
            }
          },
          "404": {
            "description": "archive not found"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "upload a chunk of the previously initialized file",
        "operationId": "uploadChunk",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "archive uid",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "name": "chunk",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChunkUploadingParam"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK uploaded (including already uploaded)"
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/files/zip": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "summary": "create zip archive from custom files",
        "operationId": "createArchive",
        "parameters": [
          {
            "name": "files",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FilesForArchive"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "zip file is producing",
            "schema": {
              "$ref": "#/definitions/ZipProducingSuccess"
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Archive": {
      "type": "object",
      "required": [
        "name",
        "size"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/ArchiveName"
        },
        "size": {
          "$ref": "#/definitions/Size"
        }
      }
    },
    "ArchiveID": {
      "description": "archive uid",
      "type": "integer",
      "format": "int64"
    },
    "ArchiveName": {
      "description": "archive name",
      "type": "string"
    },
    "ChunkNumber": {
      "description": "chunk's number or count",
      "type": "integer",
      "format": "int32"
    },
    "ChunkUploadingParam": {
      "type": "string",
      "format": "binary"
    },
    "FileHeader": {
      "description": "file header",
      "type": "object",
      "required": [
        "name",
        "size",
        "path"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/FileName"
        },
        "path": {
          "$ref": "#/definitions/FilePath"
        },
        "size": {
          "$ref": "#/definitions/Size"
        }
      }
    },
    "FileName": {
      "description": "file name",
      "type": "string"
    },
    "FilePath": {
      "description": "file path (without its name) in its source archive",
      "type": "array",
      "items": {
        "description": "folder name",
        "type": "string",
        "pattern": "^[a-zA-Z0-9._-][a-zA-Z0-9._ -]*$"
      }
    },
    "FilesForArchive": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilesForArchiveFilesItems0"
          }
        },
        "id": {
          "$ref": "#/definitions/ArchiveID"
        }
      }
    },
    "FilesForArchiveFilesItems0": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/FileName"
        },
        "new-name": {
          "$ref": "#/definitions/FileName"
        },
        "new-path": {
          "$ref": "#/definitions/FilePath"
        },
        "path": {
          "$ref": "#/definitions/FilePath"
        }
      }
    },
    "InitUploadSuccess": {
      "description": "archive summary",
      "type": "object",
      "properties": {
        "chunks": {
          "$ref": "#/definitions/ChunkNumber"
        },
        "each": {
          "$ref": "#/definitions/Size"
        },
        "id": {
          "$ref": "#/definitions/ArchiveID"
        }
      }
    },
    "Size": {
      "description": "size in bytes",
      "type": "integer",
      "format": "int64"
    },
    "ZipProducingSuccess": {
      "type": "string",
      "format": "binary"
    },
    "error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "ArchiveID": {
      "type": "integer",
      "format": "int64",
      "description": "archive uid",
      "name": "id",
      "in": "query",
      "required": true
    }
  }
}`))
}
