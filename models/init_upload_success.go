// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InitUploadSuccess archive summary
//
// swagger:model InitUploadSuccess
type InitUploadSuccess struct {

	// chunks
	Chunks ChunkNumber `json:"chunks,omitempty"`

	// each
	Each Size `json:"each,omitempty"`

	// id
	ID ArchiveID `json:"id,omitempty"`
}

// Validate validates this init upload success
func (m *InitUploadSuccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChunks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitUploadSuccess) validateChunks(formats strfmt.Registry) error {
	if swag.IsZero(m.Chunks) { // not required
		return nil
	}

	if err := m.Chunks.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("chunks")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("chunks")
		}
		return err
	}

	return nil
}

func (m *InitUploadSuccess) validateEach(formats strfmt.Registry) error {
	if swag.IsZero(m.Each) { // not required
		return nil
	}

	if err := m.Each.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("each")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("each")
		}
		return err
	}

	return nil
}

func (m *InitUploadSuccess) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

// ContextValidate validate this init upload success based on the context it is used
func (m *InitUploadSuccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChunks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEach(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InitUploadSuccess) contextValidateChunks(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Chunks.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("chunks")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("chunks")
		}
		return err
	}

	return nil
}

func (m *InitUploadSuccess) contextValidateEach(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Each.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("each")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("each")
		}
		return err
	}

	return nil
}

func (m *InitUploadSuccess) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InitUploadSuccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InitUploadSuccess) UnmarshalBinary(b []byte) error {
	var res InitUploadSuccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
